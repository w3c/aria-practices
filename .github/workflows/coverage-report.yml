name: Regression Tests Coverage Report

on:
  pull_request_target:
    paths:
    - "examples/**"
    - "test/**"
    - "!examples/landmarks/**"

permissions:
  contents: read
  issues: write

jobs:
  report:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/head

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run coverage report
        run: |
          node test/util/report.js >> coverage.log || true

      - name: Comment on PR
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const commentBody = fs.readFileSync('coverage.log', 'utf8');

            if (commentBody.length === 0) {
              return
            }
            // Get the existing comments.
            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.number,
            })
            // Find any comment already made by the bot.
            const botComment = comments.find(comment => comment.user.id === 41898282)

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              })
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.number,
                body: commentBody
              })
            }
